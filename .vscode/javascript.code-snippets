{
  "Vue TS component": {
    "scope": "javascript,typescript,vue",
    "prefix": "vtsc",
    "body": [
      "<script setup lang=\"ts\">",
      "$0",
      "</script>",
      "",
      "<template>",
      "  <div>",
      "    $1",
      "  </div>",
      "</template>",
      "",
      "<style ${2:scoped}>",
      "$3",
      "</style>",
      ""
    ],
    "description": "Creates a Vue Typescript SFC"
  },
  "Vue TS component with Props": {
    "scope": "javascript,typescript,vue",
    "prefix": "vtscp",
    "body": [
      "<script setup lang=\"ts\">",
      "defineProps<{",
      "  $0",
      "}>();",
      "</script>",
      "",
      "<template>",
      "  <div>",
      "    $1",
      "  </div>",
      "</template>",
      "",
      "<style ${2:scoped}>",
      "$3",
      "</style>",
      ""
    ],
    "description": "Creates a Vue Typescript SFC with Props"
  },
  "Vue TS Props Block": {
    "prefix": "vtsprops",
    "body": ["const props = defineProps<{", "  ${1:name}: ${2:type};", "}>();"],
    "description": "Inserts a Vue TS Define Props Block"
  },
  "Vue TS Emits Block": {
    "prefix": "vtsemits",
    "body": [
      "const emit = defineEmits<{",
      "  (e: \"${1:event}\", ${2:value}: ${3: type}): void;",
      "}>();"
    ],
    "description": "Inserts a Vue TS Define Emits Block"
  },
  "Vue Expose Block": {
    "prefix": "vexpose",
    "body": ["defineExpose({", "  $0", "});"],
    "description": "Inserts a Vue Expose Block"
  },
  "Vue Computed with Get/Set": {
    "prefix": "vcomputedset",
    "body": [
      "const ${1:name} = computed({",
      "  get: () => $0,",
      "  set: value => {",
      "    $2",
      "  }",
      "});"
    ],
    "description": "Inserts a Vue computed value with a setter"
  },
  "Vue Computed V-Model": {
    "prefix": "vmodel",
    "body": [
      "const ${1:name} = computed({",
      "  get: () => props.${2:modelValue},",
      "  set: value => {",
      "    emit(\"update:${2:modelValue}\", value);",
      "  }",
      "});"
    ],
    "description": "Inserts a Vue computed value backed by a v-model prop"
  },
  "Vue Ref": {
    "scope": "javascript,typescript,vue",
    "prefix": "vref",
    "body": ["const ${1:name} = ref(${2:initialValue})"],
    "description": "Inserts a Vue Ref statement"
  },
  "Arrow Function Statement": {
    "prefix": "const",
    "body": ["const ${1:name} = (${2:params}) => {", "  $0", "}"],
    "description": "Insert an Arrow Function Statement"
  },
  "Vue Reactive Ref": {
    "scope": "javascript,typescript,vue",
    "prefix": "vrref",
    "body": ["let ${1:name} = \\$ref(${2:initialValue})"],
    "description": "Inserts a Reactive Vue Ref statement"
  },
  "Vue TS Ref": {
    "scope": "javascript,typescript,vue",
    "prefix": "vtsref",
    "body": ["const ${1:name} = ref<${3:type}>(${2:initialValue})"],
    "description": "Inserts a Vue Ref statement with an explicit type"
  },
  "Vue TS Reactive Ref": {
    "scope": "javascript,typescript,vue",
    "prefix": "vtsrref",
    "body": ["let ${1:name} = \\$ref<${3:type}>(${2:initialValue})"],
    "description": "Inserts a Reactive Vue Ref statement with an explicit type"
  },
  "Lambda function": {
    "scope": "javascript,typescript,vue",
    "prefix": "af",
    "body": ["($1) => $0"],
    "description": "Insert a lambda function"
  },
  "Lambda function with body": {
    "scope": "javascript,typescript,vue",
    "prefix": "afb",
    "body": ["($1) => {", "  $0", "}"],
    "description": "Insert a lambda function with body"
  },
  "Console log": {
    "scope": "javascript,typescript,vue",
    "prefix": "clg",
    "body": ["console.log(\"$1\")$0"],
    "description": "Console log"
  },
  "Console log with title": {
    "scope": "javascript,typescript,vue",
    "prefix": "clgt",
    "body": ["console.log(\"${1:title}\", ${2:value})$0"],
    "description": "Console log with title"
  },
  "Console log variable": {
    "scope": "javascript,typescript,vue",
    "prefix": "clgv",
    "body": ["console.log(\"${2:$1}\", ${1:value})$0"],
    "description": "Console log with title"
  }
}
