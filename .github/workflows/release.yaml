name: "Publish"

on:
  release:
    types: [published]

jobs:
  bundle:
    name: "Bundle"
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: "Checkout the repository"
        uses: actions/checkout@v2

      - name: "Setup Python"
        uses: actions/setup-python@v3
        with:
          python-version: "3.10.x"
          cache: ${{ !env.ACT && 'pip' || '' }}

      - name: "Install dependencies"
        run: pip install -e backend[build]

      - name: "Build bundle"
        run: |
          cp .env.sample .env
          pyinstaller backend/pyinstaller.spec

      - name: "Zip bundle"
        shell: bash
        run: |
          OS=$(echo "$RUNNER_OS" | tr "[:upper:]" "[:lower:]")
          ARCH=$(echo "${RUNNER_ARCH:-unknown}" | tr "[:upper:]" "[:lower:]")
          TARGET="backend_${GITHUB_REF_NAME:-dev}_${OS}_${ARCH}"
          echo "TARGET: $TARGET"

          cd dist/deeplabcut-webui
          if [ "$RUNNER_OS" == "Linux" ]; then
              tar -czvf "${GITHUB_WORKSPACE}/${TARGET}.tar.gz" *
          elif [ "$RUNNER_OS" == "Windows" ]; then
              7z a "${GITHUB_WORKSPACE}/${TARGET}.zip" .
          else
              echo "$RUNNER_OS not supported"
              exit 1
          fi

      - name: "Upload assets"
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          shopt -s extglob
          gh release upload ${{ github.event.release.tag_name }} backend_*.@(zip|tar.gz)

  deploy:
    name: "Deploy"
    runs-on: ubuntu-latest
    concurrency: deploy-${{ github.ref }}
    env:
      VITE_BASE: "/${{ github.event.repository.name }}/"
      SITE_DESCRIPTION: "${{ github.event.repository.description }}"
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: "Checkout the repository"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Extract engines"
        id: engines
        run: |
          cp ./package.json ..
          cp ./pnpm-lock.yaml ..
          echo ::set-output name=node::$(jq --raw-output .engines.node ./package.json)

      - name: "Setup pnpm"
        uses: pnpm/action-setup@v2

      - name: "Setup node"
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.engines.outputs.node }}
          cache: ${{ !env.ACT && 'pnpm' || '' }}

      - name: "Install dependencies"
        run: |
          pnpm install
          pip install -r ../backend/requirements-docs.txt

      - name: "Run Build"
        run: |
          pnpm run build
          ln -s ./index.html ./dist/404.html
          cd .. && mkdocs build -d frontend/dist/docs

      - name: "Zip component"
        run: |
          cd dist && tar -czvf "../frontend.tar.gz" *

      - name: "Upload assets"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} frontend.tar.gz

      - name: "Deploy ðŸš€"
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: frontend/dist
