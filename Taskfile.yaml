# https://taskfile.dev

version: "3"

vars:
  CONDA_ENV: dlc-webui

tasks:
  ### BACKEND ###
  backend:
    desc: "Run the backend"
    ignore_error: true
    deps: [has-venv]
    cmds:
      - |
        {{- if .PY_INTERPRETER -}}
          '{{ .PY_INTERPRETER }}' -m uvicorn
        {{- else if eq .CONDA_DEFAULT_ENV .CONDA_ENV -}}
          uvicorn
        {{- else if eq OS "windows" -}}
          .venv/Scripts/uvicorn.exe
        {{- else -}}
          .venv/bin/uvicorn
        {{- end }} backend.app.main:app --reload

  backend:conda:
    desc: "Run the backend with conda"
    ignore_error: true
    deps: [is-conda-env]
    cmds:
      - uvicorn backend.app.main:app --reload

  clean:backend:
    desc: "Remove temporary files and directories from the backend"
    cmds:
      - python ./scripts/clean_backend.py

  lint:backend:
    desc: Format backend code
    ignore_error: true
    preconditions:
      - sh: command -v black
        msg: black does not appear to be installed, try running "pip install black"
    cmds:
      - black ./backend {{.args}}

  lint:check:backend:
    desc: Check format of the backend code
    cmds:
      - task: lint:backend
        vars:
          args: --check --diff --color

  ### FRONTEND ###
  frontend:
    desc: "Run the frontend"
    ignore_error: true
    dir: ./frontend
    cmds:
      - npm run dev -s -- --clearScreen false

  clean:frontend:
    desc: "Remove temporary files and directories from the frontend"
    cmds:
      - cd frontend && npm run clean -s

  lint:frontend:
    desc: "Format and lint the frontend code"
    dir: ./frontend
    cmds:
      - npm run lint:fix
      - npm run format
      - npm run typecheck

  lint:check:frontend:
    desc: "Check the quality of the frontend code"
    dir: ./frontend
    cmds:
      - npm run lint
      - npm run format:check
      - npm run typecheck

  ### SETUP ###
  setup:
    desc: "Setup the frontend and backend environments/dependencies"
    cmds:
      - task: setup-python
      - task: setup-node

  setup-conda-node:
    desc: "Setup the frontend and backend environments/dependencies using conda"
    cmds:
      - task: setup-conda
      - task: setup-node

  setup-node:
    desc: "Setup pnpm and install frontend dependencies"
    dir: ./frontend
    preconditions:
      - sh: command -v node
        msg: node not installed
    cmds:
      - pnpm install

  setup-python:
    desc: "Setup a venv and install dependencies"
    deps: [has-python]
    cmds:
      - 'if [ ! -d ".venv" ]; then python -m venv .venv; fi'
      - |
        {{- if eq OS "windows" -}}
          .venv/Scripts/pip.exe install -e backend
        {{- else -}}
          .venv/bin/pip install -e backend
        {{- end -}}
      - task: clean:backend

  setup-conda:
    desc: "Setup/update the conda environment"
    deps: [has-conda]
    vars:
      envs:
        sh: conda env list
    cmds:
      - |
        {{- if (contains .CONDA_ENV .envs) -}}
          conda env update -f ./backend/conda.yaml --prune
        {{- else -}}
          conda env create -f ./backend/conda.yaml
        {{- end -}}

  ### MISC ###
  fullstack:
    desc: "Run the frontend and backend concurrently"
    deps: [backend, frontend]

  lint:
    desc: "Lint and format the frontend and backend code"
    cmds:
      - task: lint:backend
      - task: lint:frontend

  lint:check:
    desc: "Check the quality of the frontend and backend code"
    cmds:
      - task: lint:check:backend
      - task: lint:check:frontend

  clean:
    desc: "Remove temporary files and directories"
    cmds:
      - task: clean:backend
      - task: clean:frontend

  dlc-gui:
    desc: "Open DeepLabCut's builtin GUI"
    deps: [is-conda-env]
    cmds:
      - ipython -c "from deeplabcut import launch_dlc; launch_dlc()"
    ignore_error: true

  ### UTILITIES ###
  has-conda:
    preconditions:
      - sh: command -v conda
        msg: conda not installed

  has-python:
    preconditions:
      - sh: command -v python
        msg: python not installed

  has-venv:
    deps: [has-python]
    preconditions:
      - sh: |
          {{- if and (not .PY_INTERPRETER) (ne .CONDA_DEFAULT_ENV .CONDA_ENV) -}}
            [ -d ".venv" ]
          {{- end -}}
        msg: virtualenv does not exist, try running "task setup-python"

  is-conda-env:
    deps: [has-conda]
    preconditions:
      - sh: '[[ "$CONDA_DEFAULT_ENV" == "{{.CONDA_ENV}}" ]]'
        msg: no conda environment found, try running "conda activate {{.CONDA_ENV}}"
